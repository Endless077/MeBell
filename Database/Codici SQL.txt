--Creazione tabelle
create table utente(username varchar(15) primary key, nome varchar(25) not null, cognome varchar(25) not null, password varchar(15) not null );
create table recensione(voto int not null, titolo varchar(25) not null, testo varchar(250), creatore varchar(15) not null, cod_locale char(7) not null );
create table location(cod char(7) primary key, nome varchar(25) not null, cod_res char(5) not null, tipo_location varchar(25) not null, check (tipo_location='Alloggio' OR tipo_location='Attrazione' OR tipo_location='Ristorante'), partita_iva char(11) not null, descrizione varchar(100) );

create table residenza(via varchar(25) not null, n_civico varchar(5) not null, cap char(5) not null, comune varchar(25) not null, cod_residenza char(5) primary key );

create table alloggio(cod char(7) primary key, prezzo_medio int, tipo_alloggio varchar(25) default 'Non Specificato', check(tipo_alloggio='Hotel' OR  tipo_alloggio='BeB' OR  tipo_alloggio='Appartamento' OR tipo_alloggio='Non Specificato') );
create table servizi_alloggio(cod char(7) not null, wi_fi char(2) default 'ns', dayuse char(2) default 'ns', spa char(2) default 'ns', piscina char(2) default 'ns', aria_condizionata char(2) default 'ns', accesso_disabili char(2) default 'ns', accesso_animali char(2) default 'ns', ascensore char(2) default 'ns', servizio_lavanderia char(2) default 'ns', tv_stereo char(2) default 'ns', parcheggio char(2) default 'ns' );

create table attrazione(cod char(7) not null, pagamento char(2) default 'ns', tipo_attrazione varchar(25) );

create table ristorazione(cod char(7) primary key, prezzo_medio int, n_posti smallint, tipo_ristorazione varchar(25) default 'Non Specificato', check(tipo_ristorazione='Elenco completo' OR tipo_ristorazione='Pizzeria' OR tipo_ristorazione='Braceria' OR tipo_ristorazione='SushiBar' OR tipo_ristorazione='Pizza e Brace' OR tipo_ristorazione='Pizza e Sushi' OR tipo_ristorazione='Brace e Sushi' OR tipo_ristorazione='Non Specificato') );

create table hotel(cod char(7) not null, n_camere smallint, n_suite smallint, stelle smallint );
create table beb(cod char(7) not null, n_camere smallint, stelle smallint, bagno_comune char(2) default 'ns', check(bagno_comune='si' OR bagno_comune='no' OR bagno_comune='ns') );
create table appartamento(cod char (7) not null, n_vani smallint, n_bagni smallint, veranda char(2) default 'ns', check(veranda='si' OR veranda='no' OR veranda='ns') );

create table braceria(cod char(7) not null, asporto char(2) default 'ns', alcolici_artigianali char(2) default 'ns', tipo_carne varchar(20) default 'Non Specificato', check(tipo_carne='Entrambe' OR tipo_carne='Importata' OR tipo_carne='Italiana' OR tipo_carne='Non Specificato') );
create table sushibar(cod char(7) not null, allyoucaneat char(2) default 'ns', tipo_sushi varchar(20) default 'Non Specificato', check(tipo_sushi='Fusion' OR tipo_sushi='Giapponese' OR tipo_sushi='Cinese' OR tipo_sushi='Non Specificato') );
create table pizzeria(cod char(7) not null, asporto char(2) default 'ns', tipo_forno varchar(20) default 'Non Specificato', check(tipo_forno='Entrambi' OR tipo_forno='A legna' OR tipo_forno='Elettrico' OR tipo_forno='Non Specificato') );

--Unique
alter table recensione add constraint uc_recensione unique(creatore,cod_locale);

alter table location add constraint uc_partita_iva unique(partita_iva);

alter table attrazione add constraint uc_cod_att unique(cod);

alter table servizi_alloggio add constraint uc_cod_sall unique(cod);

alter table hotel add constraint uc_cod_hotel unique(cod);
alter table beb add constraint uc_cod_beb unique(cod);
alter table appartamento add constraint uc_cod_app unique(cod);

alter table braceria add constraint uc_cod_brac unique(cod);
alter table sushibar add constraint uc_cod_sushi unique(cod);
alter table pizzeria add constraint uc_cod_pizza unique(cod);

--Foreign key
alter table recensione add constraint fk_recensione_creatore foreign key (creatore) references utente(username) ON DELETE CASCADE;
alter table recensione add constraint fk_recensione_cod_locale foreign key (cod_locale) references location(cod) ON DELETE CASCADE;

alter table location add constraint fk_residenza_cod_residenza foreign key (cod_res) references residenza(cod_residenza);

alter table alloggio add constraint fk_alloggio foreign key (cod) references location(cod) ON DELETE CASCADE;
alter table attrazione add constraint fk_attrazione foreign key (cod) references location(cod) ON DELETE CASCADE;
alter table ristorazione add constraint fk_ristorazione foreign key (cod) references location(cod) ON DELETE CASCADE;

alter table servizi_alloggio add constraint fk_servizi_alloggio foreign key (cod) references alloggio(cod) ON DELETE CASCADE;

alter table attrazione add constraint tipo_attrazione check(tipo_attrazione='Chiesa' OR tipo_attrazione='Museo' OR tipo_attrazione='Parco' OR tipo_attrazione='Monumento' OR tipo_attrazione='Parco Giochi' OR tipo_attrazione='Centro Sportivo' OR tipo_attrazione='Teatro' OR tipo_attrazione='Cinema' OR tipo_attrazione='Acquario' OR tipo_attrazione='Zona Balneare' OR tipo_attrazione='Zoo');

alter table hotel add constraint fk_hotel foreign key (cod) references alloggio(cod) ON DELETE CASCADE;
alter table beb add constraint fk_beb foreign key (cod) references alloggio(cod) ON DELETE CASCADE;
alter table appartamento add constraint fk_appartamento foreign key (cod) references alloggio(cod) ON DELETE CASCADE;

alter table braceria add constraint fk_braceria foreign key (cod) references ristorazione(cod) ON DELETE CASCADE;
alter table sushibar add constraint fk_sushibar foreign key (cod) references ristorazione(cod) ON DELETE CASCADE;
alter table pizzeria add constraint fk_pizzeria foreign key (cod) references ristorazione(cod) ON DELETE CASCADE;

--SEQUENCE

Create sequence Cod_Location
start with 1000
increment by 1
minvalue 1000
maxvalue 9999
nocache
nocycle;

--

Create sequence Cod_Residenza
start with 1000
increment by 1
minvalue 1000
maxvalue 9999
nocache
nocycle;

--TRIGGER SEQ

create or replace TRIGGER Seq_Cod_Location
before insert on location
for each row

declare
prefisso char(3):='LOC';
codice char(4):='';

begin

codice:=COD_LOCATION.nextval;
:new.cod:=prefisso||codice;

END;

--

create or replace TRIGGER Seq_Cod_Residenza
before insert on residenza
for each row

declare
prefisso char(1):='R';
codice char(4):='';

begin

codice:=COD_RESIDENZA.nextval;
:new.cod_residenza:=prefisso||codice;

END;

--TRIGGER

create trigger update_utente
  after update of username on utente
  for each row 

begin 

   update recensione r
   set r.creatore=:new.username
   where r.creatore=:old.username;

END;

--

create trigger update_cod_residenza
  after update of cod_residenza on residenza
  for each row

begin

   update location l
   set l.cod_res=:new.cod_residenza
   where l.cod_res=:old.cod_residenza;

END;

--

create trigger insert_new_location
  after insert on location
  for each row

begin

IF :new.tipo_location='Alloggio' THEN

	insert into alloggio(cod) values (:new.cod);
	insert into servizi_alloggio(cod) values (:new.cod);
	

ELSIF :new.tipo_location='Ristorazione' THEN

	insert into ristorazione(cod) values (:new.cod);

ELSIF :new.tipo_location='Attrazione' THEN

	insert into attrazione(cod) values (:new.cod);


END IF;

END;

--

create trigger update_tipo_location
  after update of tipo_location on location
  for each row

begin

IF :old.tipo_location='Alloggio' AND :old.tipo_location<>:new.tipo_location THEN

	delete from alloggio where alloggio.cod=:old.cod;
	delete from servizi_alloggio where servizi_alloggio.cod=:old.cod;
    
ELSIF :old.tipo_location='Ristorazione' AND :old.tipo_location<>:new.tipo_location THEN

	delete from ristorazione where ristorazione.cod=:old.cod;

ELSIF :old.tipo_location='Attrazione' AND :old.tipo_location<>:new.tipo_location THEN

	delete from attrazione where attrazione.cod=:old.cod;

END IF;

IF :new.tipo_location='Alloggio' AND  :old.tipo_location<>:new.tipo_location THEN

	insert into alloggio values (:old.cod, null, null);
	insert into servizi_alloggio(cod) values (:old.cod);

ELSIF  :new.tipo_location='Ristorazione' AND :old.tipo_location<>:new.tipo_location THEN

	insert into ristorazione values (:old.cod, null, null, null);

ELSIF  :new.tipo_location='Attrazione' AND  :old.tipo_location<>:new.tipo_location THEN

	insert into attrazione values (:old.cod, null, null);
   
END IF;

END;

--

create trigger update_tipo_alloggio
  after update of tipo_alloggio on alloggio
  for each row

begin

IF :old.tipo_alloggio='Hotel' AND :old.tipo_alloggio<>:new.tipo_alloggio THEN

	delete from hotel where hotel.cod=:old.cod;
    
ELSIF :old.tipo_alloggio='BeB' AND :old.tipo_alloggio<>:new.tipo_alloggio THEN

	delete from beb where beb.cod=:old.cod;

ELSIF :old.tipo_alloggio='Appartamento' AND :old.tipo_alloggio<>:new.tipo_alloggio THEN

	delete from appartamento where appartamento.cod=:old.cod;

END IF;

IF :new.tipo_alloggio='Hotel' AND  :old.tipo_alloggio<>:new.tipo_alloggio THEN

	insert into hotel values (:old.cod, null, null, null);

ELSIF  :new.tipo_alloggio='BeB' AND :old.tipo_alloggio<>:new.tipo_alloggio THEN

	insert into beb values (:old.cod, null, null, null);

ELSIF  :new.tipo_alloggio='Appartamento' AND  :old.tipo_alloggio<>:new.tipo_alloggio THEN

	insert into appartamento values (:old.cod, null, null, null);
   
END IF;

END;

--

create trigger update_tipo_ristorazione
  after update of tipo_ristorazione on ristorazione
  for each row

begin

IF :old.tipo_ristorazione='Elenco completo' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    delete from braceria where braceria.cod=:old.cod;
    delete from sushibar where sushibar.cod=:old.cod;
    delete from pizzeria where pizzeria.cod=:old.cod;

ELSIF :old.tipo_ristorazione='Braceria' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

     delete from braceria where braceria.cod=:old.cod;

ELSIF :old.tipo_ristorazione='SushiBar' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    delete from sushibar where sushibar.cod=:old.cod;

ELSIF :old.tipo_ristorazione='Pizzeria' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    delete from pizzeria where pizzeria.cod=:old.cod;

ELSIF :old.tipo_ristorazione='Pizza e Brace' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    delete from pizzeria where pizzeria.cod=:old.cod;
    delete from braceria where braceria.cod=:old.cod;

ELSIF :old.tipo_ristorazione='Pizza e Sushi' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    delete from pizzeria where pizzeria.cod=:old.cod;
    delete from sushibar where sushibar.cod=:old.cod;

ELSIF :old.tipo_ristorazione='Brace e Sushi' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    delete from braceria where braceria.cod=:old.cod;
    delete from sushibar where sushibar.cod=:old.cod;

END IF;

IF :new.tipo_ristorazione='Elenco completo' AND  :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into braceria(cod) values (:new.cod);
    insert into sushibar(cod) values (:new.cod);
    insert into pizzeria(cod) values (:new.cod);

ELSIF  :new.tipo_ristorazione='Braceria' AND :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into braceria(cod) values (:new.cod);

ELSIF  :new.tipo_ristorazione='SushiBar' AND  :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into sushibar(cod) values (:new.cod);

ELSIF  :new.tipo_ristorazione='Pizzeria' AND  :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into pizzeria(cod) values (:new.cod);

ELSIF  :new.tipo_ristorazione='Pizza e Brace' AND  :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into pizzeria(cod) values (:new.cod);
    insert into braceria(cod) values (:new.cod);

ELSIF  :new.tipo_ristorazione='Pizza e Sushi' AND  :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into pizzeria(cod) values (:new.cod);
    insert into sushibar(cod) values (:new.cod);

ELSIF  :new.tipo_ristorazione='Brace e Sushi' AND  :old.tipo_ristorazione<>:new.tipo_ristorazione THEN

    insert into braceria(cod) values (:new.cod);
    insert into sushibar(cod) values (:new.cod);

END IF;

END;

--
create trigger update_cod_locale
  after update of cod on location
  for each row 

declare
tipo VARCHAR2(25):='';

begin 
    
  update recensione r
  set r.cod_locale=:new.cod 
  where r.cod_locale=:old.cod;
  
  tipo:=:old.tipo_location;

IF tipo='Attrazione'  THEN

    update attrazione a
    set a.cod=:new.cod
    where a.cod=:old.cod;
    
ELSIF tipo='Alloggio' THEN

    update alloggio al
    set al.cod=:new.cod
    where al.cod=:old.cod;

ELSIF tipo='Ristorazione' THEN

   update ristorazione ri
   set ri.cod=:new.cod
   where ri.cod=:old.cod;

END IF;

END;

--

create trigger update_cod_alloggio
  after update of cod on alloggio
  for each row 

declare
tipo VARCHAR2(25):='';

begin 

  tipo:=:old.tipo_alloggio;

IF tipo='Hotel'  THEN

    update hotel h
    set h.cod=:new.cod
    where h.cod=:old.cod;

ELSIF tipo='BeB' THEN

    update beb bb
    set bb.cod=:new.cod
    where bb.cod=:old.cod;

ELSIF tipo='Appartamento' THEN

   update appartamento ap
   set ap.cod=:new.cod
   where ap.cod=:old.cod;

END IF;

END;

--

create trigger update_cod_ristorazione
  after update of cod on ristorazione
  for each row 

declare
tipo VARCHAR2(25):='';

begin 

  tipo:=:old.tipo_ristorazione;

IF tipo='Elenco completo'  THEN

    update braceria b
    set b.cod=:new.cod
    where b.cod=:old.cod;
    
    update sushibar sh
    set sh.cod=:new.cod
    where sh.cod=:old.cod;
    
    update pizzeria p
    set p.cod=:new.cod
    where p.cod=:old.cod;

ELSIF tipo='Braceria' THEN

    update braceria b
    set b.cod=:new.cod
    where b.cod=:old.cod;

ELSIF tipo='SushiBar' THEN

    update sushibar sh
    set sh.cod=:new.cod
    where sh.cod=:old.cod;

ELSIF tipo='Pizzeria' THEN
    
    update pizzeria p
    set p.cod=:new.cod
    where p.cod=:old.cod;

ELSIF tipo='Pizza e Brace' THEN

    update pizzeria p
    set p.cod=:new.cod
    where p.cod=:old.cod;
    
    update braceria b
    set b.cod=:new.cod
    where b.cod=:old.cod;

ELSIF tipo='Pizza e Sushi' THEN

    update pizzeria p
    set p.cod=:new.cod
    where p.cod=:old.cod;
    
    update sushibar sh
    set sh.cod=:new.cod
    where sh.cod=:old.cod;

ELSIF tipo='Brace e Sushi' THEN

    update braceria b
    set b.cod=:new.cod
    where b.cod=:old.cod;

    update sushibar sh
    set sh.cod=:new.cod
    where sh.cod=:old.cod;

END IF;

END;

--

create trigger update_sevizi_alloggio
  after update of cod on alloggio
  for each row 

begin 

   update servizi_alloggio sa
   set sa.cod=:new.cod 
   where sa.cod=:old.cod;

END;