--Creazione tabelle
create table utente(nickname char(15) primary key, nome varchar(25) not null, cognome varchar(25) not null, password varchar(15) not null );
create table recensione(voto int not null, titolo varchar(25) not null, testo varchar(250), creatore char(15) not null, cod_locale char(10) not null );
create table location(cod char(10) primary key, nome varchar(25) not null, cod_res char(5) not null, tipo_location varchar(25) not null, check (tipo_location='Alloggio' OR tipo_location='Attrazione' OR tipo_location='Ristorante'), partita_iva char(11), descrizione varchar(100) );

create table residenza(via varchar(25) not null, n_civico char(3) not null, cap char(5) not null, comune varchar(25) not null, cod_residenza char(5) primary key );

create table alloggio(cod char(10) not null, n_camere smallint, n_suite smallint, stelle smallint, tipo_alloggio varchar(25), check(tipo_alloggio='Hotel' OR  tipo_alloggio='BEB' OR  tipo_alloggio='Appartamento') );
create table servizi_alloggio(cod char(10), wi_fi char(1) default 'n', spa char(1) default 'n', piscina char(1) default 'n', aria_condizionata char(1) default 'n', accesso_disabili char(1) default 'n', accesso_animali char(1) default 'n', ascensore char(1) default 'n', servizio_lavanderia char(1) default 'n', tv_stereo char(1) default 'n', parcheggio char(1) default 'n' );

create table attrazione(cod char(10), pagamento char(1) default 'n', tipo_attrazione varchar(25) );

create table ristorante(cod char(10), n_posti smallint, tipo_cucina varchar(25), check(tipo_cucina='Fusion' OR tipo_cucina='Orientale' OR tipo_cucina='Occidentale') );
create table servizi_ristorante(cod char(10), fast_food char(1) default 'n', pizzeria char(1) default 'n', braceria char(1) default 'n', birreria char(1) default 'n', pub char(1) default 'n', diner char(1) default 'n', bar char(1) default 'n' );

--Unique
alter table recensione add constraint uc_recensione unique (creatore,cod_locale);

alter table alloggio add constraint uc_cod_all unique(cod);
alter table ristorante add constraint uc_cod_rist unique(cod);
alter table attrazione add constraint uc_cod_att unique(cod);

--Foreign key
alter table recensione add constraint fk_recensione_creatore foreign key (creatore) references utente(nickname) ON DELETE CASCADE;
alter table recensione add constraint fk_recensione_cod_locale foreign key (cod_locale) references location(cod) ON DELETE CASCADE;

alter table location add constraint fk_residenza_cod_residenza foreign key (cod_res) references residenza(cod_residenza);

alter table alloggio add constraint fk_alloggio foreign key (cod) references location(cod) ON DELETE CASCADE;
alter table attrazione add constraint fk_attrazione foreign key (cod) references location(cod) ON DELETE CASCADE;
alter table ristorante add constraint fk_ristorante foreign key (cod) references location(cod) ON DELETE CASCADE;

alter table servizi_alloggio add constraint fk_servizi_alloggio foreign key (cod) references alloggio(cod) ON DELETE CASCADE;
alter table attrazione add constraint tipo_attrazione check(tipo_attrazione='Chiesa' OR tipo_attrazione='Museo' OR tipo_attrazione='Parco' OR tipo_attrazione='Monumento' OR tipo_attrazione='Parco Giochi' OR tipo_attrazione='Centro Sportivo' OR tipo_attrazione='Teatro' OR tipo_attrazione='Cinema' OR tipo_attrazione='Acquario' OR tipo_attrazione='Zona Balneare' OR tipo_attrazione='Zoo');
alter table servizi_ristorante add constraint fk_servizi_ristorazione foreign key (cod) references ristorante(cod) ON DELETE CASCADE;

--SEQUENCE

Create sequence Cod_Location
start with 1000
increment by 1
minvalue 1000
maxvalue 9999
nocache
nocycle;

--

Create sequence Cod_Residenza
start with 1000
increment by 1
minvalue 1000
maxvalue 9999
nocache
nocycle;

--TRIGGER

create or replace TRIGGER Seq_Cod_Location
before insert on location
for each row

declare
prefisso char(3):='LOC';
codice char(7):='';

begin

codice:=COD_LOCATION.nextval;
:new.cod:=prefisso||codice;

END;

--

create or replace TRIGGER Seq_Cod_Residenza
before insert on residenza
for each row

declare
prefisso char(1):='R';
codice char(4):='';

begin

codice:=COD_RESIDENZA.nextval;
:new.cod_residenza:=prefisso||codice;

END;

--

create trigger or replace update_utente
  after update of nickname on utente
  for each row 

begin 

   update recensione r
   set r.creatore=:new.nickname 
   where r.creatore=:old.nickname;

END;

--

create or replace trigger update_cod_locale
  after update of cod on location
  for each row 

declare
tipo VARCHAR2(25):='';

begin 
    
  update recensione r
  set r.cod_locale=:new.cod 
  where r.cod_locale=:old.cod;
  
  tipo:=:old.tipo_location;

IF tipo='Attrazione'  THEN

    update attrazione a
    set a.cod=:new.cod
    where a.cod=:old.cod;

ELSIF tipo='Alloggio' THEN

    update alloggio al
    set al.cod=:new.cod
    where al.cod=:old.cod;

ELSE

   update ristorante ri
   set ri.cod=:new.cod
   where ri.cod=:old.cod;

END IF;

END;

--

create or replace trigger update_cod_residenza
  after update of cod_residenza on residenza
  for each row

begin

   update location l
   set l.cod_res=:new.cod_residenza
   where l.cod_res=:old.cod_residenza;

END;

--

create or replace trigger update_tipo_location
  after update of tipo_location on location
  for each row

begin

IF :old.tipo_location='Alloggio' AND :old.tipo_location<>:new.tipo_location THEN

	delete from alloggio where alloggio.cod=:old.cod;
	delete from servizi_alloggio where servizi_alloggio.cod=:old.cod;
    
ELSIF :old.tipo_location='Ristorante' AND :old.tipo_location<>:new.tipo_location THEN

	delete from ristorante where ristorante.cod=:old.cod;
	delete from servizi_ristorante where servizi_ristorante.cod=:old.cod;

ELSIF :old.tipo_location='Attrazione' AND :old.tipo_location<>:new.tipo_location THEN

	delete from attrazione where attrazione.cod=:old.cod;

END IF;

IF :new.tipo_location='Alloggio' AND  :old.tipo_location<>:new.tipo_location THEN

	insert into alloggio values (:old.cod, null, null, null, null);
	insert into servizi_alloggio(cod) values (:old.cod);

ELSIF  :new.tipo_location='Ristorante' AND :old.tipo_location<>:new.tipo_location THEN

	insert into ristorante values (:old.cod, null, null);
	insert into servizi_ristorante(cod) values (:old.cod);

ELSIF  :new.tipo_location='Attrazione' AND  :old.tipo_location<>:new.tipo_location THEN

	insert into attrazione values (:old.cod, null, null);
   
END IF;

END;

--

create or replace trigger insert_new_location
  after insert on location
  for each row

begin

IF :new.tipo_location='Alloggio' THEN

	insert into alloggio(cod) values (:new.cod);
	Insert into servizi_alloggio(cod) values (:new.cod);

ELSIF :new.tipo_location='Ristorante' THEN

	insert into ristorante(cod) values (:new.cod);
	Insert into servizi_ristorante(cod) values (:new.cod);

ELSIF :new.tipo_location='Attrazione' THEN

	insert into attrazione(cod) values (:new.cod);


END IF;

END;

--

create or replace trigger update_servizi_ristorante
  after update of cod on ristorante
  for each row 

begin 

   update servizi_ristorante sr
   set sr.cod=:new.cod 
   where sr.cod=:old.cod;

END;

--

create or replace trigger update_sevizi_alloggio
  after update of cod on alloggio
  for each row 

begin 

   update servizi_alloggio sa
   set sa.cod=:new.cod 
   where sa.cod=:old.cod;

END;